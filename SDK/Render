function InitSDK( ... )
    local SDK = "https://api.github.com/repos/DoomIsEternal/Doom/contents/SDK?ref=master"
    local SDK_JSON = game:GetService("HttpService"):JSONDecode(game:HttpGet(SDK));
	for _,Package in next,SDK_JSON do
	    local code = game:HttpGet(Package.download_url);
	    getgenv()[Package.name] = loadstring(code)();
	    warn("Loaded SDK File: "..Package.name) -- For Debug Purposes only!
	end
end

function InitUI(States)
    local FinityWindow = Finity.new(true)
    FinityWindow.ChangeToggleKey(Enum.KeyCode.Semicolon)

    local AimbotCategory = FinityWindow:Category("Combat")
    local VisualsCategory = FinityWindow:Category("Visuals")
    local RageCategory = FinityWindow:Category("Rage")
    local MiscCategory = FinityWindow:Category("Misc")
    local SettingsCategory = FinityWindow:Category("Settings")
    -- Visuals Sectors
    local VisualsESPSettings = VisualsCategory:Sector("ESP Settings")
    local VisualsPlayerESP = VisualsCategory:Sector("Player Settings")
    local _ = VisualsCategory:Sector("")
    local VisualsColorESP = VisualsCategory:Sector("ESP Colors")

    -- Aimbot Sectors
    local AimbotConfigurations = AimbotCategory:Sector("SilentAim Configurations")
    local TriggerBotConfig = AimbotCategory:Sector("TriggerBot Configurations")

    -- Rage Sectors
    local RageConfigurations = RageCategory:Sector("Rage Configuration")

    -- Misc Sectors
    local MiscGConfigurations = MiscCategory:Sector("Guns Configuration")
    local MiscMConfigurations = MiscCategory:Sector("Movement Configuration")

    AimbotConfigurations:Cheat(
        "Checkbox", -- Type
        "SilentAim Enabled", -- Name
        function(State) -- Callback function
            States.Aimbot.SilentAim.Enabled = State
        end
    )

    AimbotConfigurations:Cheat("Dropdown", "Target Part", function(Option)
        States.Aimbot.SilentAim.Target = Option
    end, {
        options = {
            "Head",
            "Torso"
        }
    })

    AimbotConfigurations:Cheat("Slider", "SilentAim FOV", function(Value)
        States.Aimbot.SilentAim.FOV = tonumber(Value)
    end, {min = 0, max = 170, suffix = "°"})

    TriggerBotConfig:Cheat("Checkbox", "Enabled", function(State)
        States.Aimbot.Trigger.Enabled = State
    end)

    TriggerBotConfig:Cheat("Checkbox", "Trigger on Head", function(State)
        States.Aimbot.Trigger.OnHead = State
    end)

    TriggerBotConfig:Cheat("Checkbox", "Trigger on Torso", function(State)
        States.Aimbot.Trigger.OnTorso = State
    end)

    TriggerBotConfig:Cheat("Checkbox", "Trigger on Limbs", function(State)
        States.Aimbot.Trigger.OnLimbs = State
    end)

    TriggerBotConfig:Cheat("Slider", "TriggerBot Delay", function(Value)
        States.Aimbot.Trigger.Delay = tonumber(Value)
    end, {min = 0, max = 2000, suffix = "ms"})

    VisualsESPSettings:Cheat("Checkbox", "ESP Enabled", function(State)
        ESPLib:SetESP(State)
    end)

    VisualsESPSettings:Cheat("Checkbox", "Bone ESP", function(State)
        ESPLib:SetSkeleton(State)
    end)

    VisualsESPSettings:Cheat("Checkbox", "Box ESP", function(State)
        ESPLib:SetBox(State)
    end)

    --[[VisualsESPSettings:Cheat("Dropdown", "Box ESP Type", function(Option)
        
    end, {
        options = {
            "3D",
            "2D"
        }
    })]]

    VisualsESPSettings:Cheat("Checkbox", "Tracers", function(State)
        ESPLib:SetInfo("t",State)
    end)

    VisualsESPSettings:Cheat("Checkbox", "Show Team", function(State)
        ESPLib:SetExtra("cTeam",State)
    end)


    VisualsESPSettings:Cheat("Checkbox", "Show Name", function(State)
        ESPLib:SetInfo("n",State)
    end)

    VisualsESPSettings:Cheat("Checkbox", "Show Distance", function(State)
        ESPLib:SetInfo("d",State)
    end)

    VisualsPlayerESP:Cheat("Checkbox", "Night Mode", function(State)
        print("Checkbox state changed:", State)
    end)

    VisualsPlayerESP:Cheat("Checkbox", "No ViewModel", function(State)
        print("Checkbox state changed:", State)
    end)

    VisualsPlayerESP:Cheat("Checkbox", "No Gun", function(State)
        print("Checkbox state changed:", State)
    end)

    VisualsPlayerESP:Cheat("Checkbox", "No Arms", function(State)
        print("Checkbox state changed:", State)
    end)

    VisualsPlayerESP:Cheat("Checkbox", "Custom Viewmodel Materials", function(State)
        print("Checkbox state changed:", State)
    end)


    VisualsPlayerESP:Cheat("Dropdown", "ViewModel Materials", function(Option)
        print("Dropdown option changed:", Option)
    end, {
        options = {
            "Smooth Plastic",
            "Force Field"
        }
    })

    VisualsPlayerESP:Cheat("Slider", "Viewmodel Transparency", function(Value)
        print("Silder value changed:", Value)
    end, {min = 0, max = 1, suffix = ""})

    VisualsPlayerESP:Cheat("Slider", "Custom FOV", function(Value)
        print("Silder value changed:", Value)
    end, {min = 0, max = 170, suffix = "°"})

    VisualsPlayerESP:Cheat("Checkbox", "Rainbow", function(State)
        ESPLib:SetENU("Rainbow",State)
        ESPLib:SetENU("cTeam",not State)
    end)

    VisualsPlayerESP:Cheat("Checkbox", "Team Color", function(State)
        ESPLib:SetENU("Rainbow",not State)
        ESPLib:SetENU("cTeam",State)
    end)

    VisualsColorESP:Cheat("Colorpicker", "ESP Color", function(Value)
        ESPLib:SetColor(Value)
    end)

    VisualsColorESP:Cheat("Colorpicker", "Viewmodel Color", function(Value)
        print("CPicker value changed:", Value)
    end)

    RageConfigurations:Cheat("Checkbox", "Rage Bot", function(State)
        States.Rage.RageBot = State
    end)

    RageConfigurations:Cheat("Checkbox", "Anti Aim", function(State)
        States.Rage.AA = State
    end)

    RageConfigurations:Cheat("Checkbox", "Wallhack", function(State)
        States.Rage.Wallhack = State
    end)

    MiscGConfigurations:Cheat("Checkbox", "Inf Ammo", function(State)
        print("Checkbox state changed:", State)
    end)

    MiscGConfigurations:Cheat("Checkbox", "All Auto", function(State)
        print("Checkbox state changed:", State)
    end)

    MiscGConfigurations:Cheat("Checkbox", "No Spread", function(State)
        print("Checkbox state changed:", State)
    end)

    MiscGConfigurations:Cheat("Checkbox", "No Recoil", function(State)
        print("Checkbox state changed:", State)
    end)

    MiscMConfigurations:Cheat("Checkbox", "Speed", function(State)
        print("Checkbox state changed:", State)
    end)

    MiscMConfigurations:Cheat("Slider", "Spped Amount", function(Value)
        print("Silder value changed:", Value)
    end, {min = 0, max = 2000, suffix = ""})

    MiscMConfigurations:Cheat("Checkbox", "Jump Height", function(State)
        print("Checkbox state changed:", State)
    end)

    MiscMConfigurations:Cheat("Slider", "Jump Height Amount", function(Value)
        print("Silder value changed:", Value)
    end, {min = 0, max = 2000, suffix = ""})

    MiscMConfigurations:Cheat("Checkbox", "Flight", function(State)
        print("Checkbox state changed:", State)
    end)

    MiscMConfigurations:Cheat("Checkbox", "No Slow", function(State)
        print("Checkbox state changed:", State)
    end)

    return "SUCCESS"
end

local States = {Aimbot={SilentAim={Enabled=false,FOV=5,Target="Head"},Trigger={Enabled=false,OnHead=false,OnTorso=false,OnLimbs=false,Delay=0}},Visuals={},Rage={RageBot=false,AA=false,Wallhack=false}}
----------------------------------------------------------------------------------------------
local Succ,Response = pcall(InitSDK)
local Succ2,Response2 = pcall(InitUI,States)

if not Succ then
    return warn('Failed to load SDK Files',Response)
end

if not Succ2 then
    return warn('Failed to create UI',Response2)
end
----------------------------------------------------------------------------------------------
local Weapons = RepS:WaitForChild("Weapons")
local Events = RepS:WaitForChild("Events")
----------------------------------------------------------------------------------------------
local clientFuncs = regSDK.GC:DeepSearchFunc(Plr.PlayerGui.GUI.Client)
local menuFuncs = regSDK.GC:DeepSearchFunc(Plr.PlayerGui.Menew.LocalScript)
----------------------------------------------------------------------------------------------
local ClosestSA;
local LastTarget,LastWas;
----------------------------------------------------------------------------------------------
local CustomFuncs = {}

function CustomFuncs:GetGun()
    local GunName = Plr.PlayerGui.GUI.Vitals.Ammo.Gun.Text
    if GunName == "Gun Name" then
        return nil
    else
        return Weapons:FindFirstChild(GunName)
    end
    return nil
end

function CustomFuncs:CheckVis(Player,Part,UseV2S)
    if Plr.Character then
        local Ignore = {Plr.Character,workspace.Camera,Plr:GetMouse().TargetFilter}

        local Unit = (Part.Position - Plr.Character[Part.Name].Position).unit*500^2
        local RayCast = Ray.new(Plr.Character[Part.Name].Position,Unit)
        local Hit,Point,Normal = workspace:FindPartOnRayWithIgnoreList(RayCast,Ignore)

        if Hit and Hit:IsDescendantOf(Player.Character) then
            if UseV2S then
                local _,Vis = workspace.Camera:WorldToViewportPoint(Point)
                return (true == Vis)
            end
            return true
        end
    end
    return false
end

function CustomFuncs:GetPlayerArray(CheckVis,CheckTeam)
    local Array = {} 
    for _,plr in next, Players:GetPlayers() do
        if plr and plr.Character and plr ~= Plr and ((plr.Team == Plr.Team) ~= CheckTeam) then
            if CheckVis then
                if CustomFuncs:CheckVis(plr,plr.Character.HeadHB,false) then
                    table.insert(Array, plr)
                end
            else
                table.insert(Array, plr)
            end
        end
    end
    return Array
end

function CustomFuncs:GetNearestToMouse(FOV,CheckVis)
    local Closest;
    local ClosestDist = math.huge;

    for _,plr in next, Players:GetPlayers() do
        if plr and plr.Character and plr ~= Plr and ((plr.Team == Plr.Team) ~= CheckTeam) and plr.Character:FindFirstChild("HeadHB") then
            local ScreenPos = Camera:WorldToScreenPoint(plr.Character.HeadHB.Position)
            local Dist = math.abs((Vector2.new(Mouse.X,Mouse.Y)-Vector2.new(ScreenPos.X,ScreenPos.Y)).magnitude)

            if CheckVis then
                if CustomFuncs:CheckVis(plr,plr.Character.HeadHB,false) then
                    if Dist <= FOV and Dist < ClosestDist then
                        Closest = plr
                        ClosestDist = Dist
                    end
                end
            else
                if Dist <= FOV and Dist < ClosestDist then
                    Closest = plr
                    ClosestDist = Dist
                end
            end
        end
    end

    return Closest
end

function CustomFuncs:Shoot(Hit,Headshot,Backstab,Critical,MCritical)
    local Gun = CustomFuncs:GetGun()
    if Gun then
        local A_1 = Hit
        local A_2 = Hit.Position
        local A_3 = Gun.Name
        local A_4 = Headshot -- headshot
        local A_5 = (A_2 - Vector3.new(workspace.Camera.CoordinateFrame * CFrame.new(1, -0.45, 0))).magnitude -- p distance
        local A_6 = Backstab-- backstab
        local A_7 = Critical -- crit
        local A_8 = MCritical -- m crit
        local A_9 = 1 -- penetrated
        local A_10 = false -- falloff
        local A_11 = Gun.FireRate.Value -- FireRate
        local A_12 = Gun.ReloadTime.Value -- ReloadTime
        local A_13 = Gun.Ammo.Value -- Ammo
        local A_14 = Gun.StoredAmmo.Value -- StoredAmmo
        local A_15 = Gun.Bullets.Value -- Bullets
        local A_16 = Gun.EquipTime.Value -- EquipTime
        local A_17 = Gun.RecoilControl.Value -- RecoilControl
        local A_18 = Gun.Auto.Value -- Auto
        local A_19 = Gun["Speed%"].Value -- Speed%
        local A_20 = workspace.DistributedGameTime -- DistributedTime
        local A_21 = Hit.Velocity.Y -- idk just guessing
        local A_22 = 1 -- idk (but always 1)
        Events.HitPart:FireServer(A_1, A_2, A_3, A_4, A_5, A_6, A_7, A_8, A_9, A_10, A_11, A_12, A_13, A_14, A_15, A_16, A_17, A_18, A_19, A_20, A_21, A_22)
    end
end
----------------------------------------------------------------------------------------------
local gameMeta = getrawmetatable(game)
local namecall = gameMeta.__namecall

setreadonly(gameMeta,false)

gameMeta.__namecall = newcclosure(function(self,...)
    if not checkcaller() then
        local method = getnamecallmethod()
        local args = {...}
        if method == "FindPartOnRayWithIgnoreList" and self and self == workspace then
            if args[2] and type(args[2]) == "table" and States.Rage.Wallhack then
                table.insert(args[2],workspace.Map)
            end
        elseif method == "FireServer" then
            if self and self.Name then
                if self.Name == "ControlTurn" then
                    if States.Rage.AA then
                        args[1] = -5
                    end
                end

                if self.Name == "HitPart" then
                    if States.Aimbot.SilentAim.Enabled and ClosestSA then
                        args[1] = ClosestSA
                        args[2] = ClosestSA.Position
                        args[4] = 2
                        args[10] = false 
                    end
                end
            end
        end

        return namecall(self,unpack(args))
    end

    return namecall(self,...) 
end)

setreadonly(gameMeta,true)
----------------------------------------------------------------------------------------------
RunS.RenderStepped:Connect(function(Delta)
    if States.Rage.RageBot then
        local AS,Array = pcall(function() return CustomFuncs:GetPlayerArray(true,true) end)
        if not AS then print(Array) return end
        if #Array > 0 then
            table.foreach(Array,function(i,plr)
                if plr and plr.Character and plr.Character:FindFirstChild("HeadHB") then
                    local HeadHB = plr.Character:FindFirstChild("HeadHB")
                    local Shot,Failed = pcall(function() CustomFuncs:Shoot(HeadHB,2,false,true,false) end)
                    if not Shot then
                        warn("Shot failed for player ->",plr.Name,"Trace ->",Failed)
                    end
                end
            end)
        end
    end
    if States.Aimbot.SilentAim.Enabled then
        failed,found = pcall(function() return CustomFuncs:GetNearestToMouse(States.Aimbot.SilentAim.FOV*10,true) end)
        if not failed then
            warn(found)
        end
        local PartToFind = States.Aimbot.SilentAim.Target == "Head" and "HeadHB" or "UpperTorso"
        ClosestSA = found and found.Character:FindFirstChild(PartToFind) or nil
    end
end)
----------------------------------------------------------------------------------------------
coroutine.wrap(function()
    while true do
        if States.Aimbot.Trigger.Enabled then
            if Mouse.Target then
                if Mouse.Target.Parent and Mouse.Target.Parent:FindFirstChild("Humanoid") and Mouse.Target.Parent:FindFirstChild("HeadHB") then
                    local hum = Mouse.Target.Parent:FindFirstChild("Humanoid")
                    if Mouse.Target.Name == "HeadHB" then
                        if States.Aimbot.Trigger.OnHead then
                            wait(States.Aimbot.Trigger.Delay/1000)
                            pcall(clientFuncs.firebullet)
                        end
                    else
                        local LimbType = hum:GetLimb(Mouse.Target)
                        if LimbType.Value > 1 and LimbType ~= Enum.Limb.Unknown then
                            if States.Aimbot.Trigger.OnLimbs then
                                wait(States.Aimbot.Trigger.Delay/1000)
                                pcall(clientFuncs.firebullet)
                            end
                        else
                            if LimbType.Value == 1 then
                                if States.Aimbot.Trigger.OnTorso then
                                    wait(States.Aimbot.Trigger.Delay/1000)
                                    pcall(clientFuncs.firebullet)
                                end
                            else
                                if States.Aimbot.Trigger.OnHead then
                                    wait(States.Aimbot.Trigger.Delay/1000)
                                    pcall(clientFuncs.firebullet)
                                end
                            end
                        end
                    end
                end
            end
        end

        game:GetService("RunService").RenderStepped:Wait()
    end
end)()
