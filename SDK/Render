assert(Drawing,"https://x.synapse.to/ <- Here purchase a good exploit, poor skid.")
repeat wait() until regSDK and Plr and RunS
local ESP = {Rainbow=false,TColor=false,cTeam=true,Info={},Skeletons={},DBoxes={},updating=false,Enabled={s=false,b=false,i={n=false,d=false,t=false}}}
local Thicc=1
local color=Color3.fromRGB(255,255,255)
local Skeletons = ESP.Skeletons
local Info = ESP.Info
local DBoxes = ESP.DBoxes

local drawings = {}
local templates = {}

function newDraw(Type,Props)
    local DrawObj = Drawing.new(Type)
    for Prop,Val in next, Props do
        DrawObj[Prop] = Val
    end
	table.insert(drawings,DrawObj)
    return DrawObj
end

function ClearAll()
    for i,v in pairs(drawings) do
        local removed2,failr2 = pcall(function() v.Visible = false end)
        local removed,failr = pcall(function() v:Remove() end)
        if not removed then
            print(failr)
        end
    end
    drawings = {}
    ESP.Skeletons = {}
    ESP.DBoxes = {}
    Skeletons = ESP.Skeletons
    DBoxes = ESP.DBoxes
end

function Update(sPlr)
	local color = ESP.cTeam and (sPlr.Team ~= Plr.Team and Color3.new(1,0,0) or Color3.new(0,1,0)) or color

	local function UpdateInfo()
		if Info[sPlr.Name] ~= nil and #Info[sPlr.Name] == 3 and sPlr.Character:FindFirstChild("Head") then
			local InfoC = Info[sPlr.Name]

			local Char = sPlr.Character
			local Head = Char:FindFirstChild("Head")

			local NameTag = InfoC[1]
			local DistanceTag = InfoC[2]
			local Tracer = InfoC[3]

			local HeadPos,Vis = workspace.Camera:WorldToViewportPoint(Head.Position + Vector3.new(0, Head.Size.Y / 2, 0))

			if Vis then
				if ESP.Enabled.i.n then
					NameTag.Position = Vector2.new(HeadPos.X, HeadPos.Y);
					NameTag.Text = sPlr.Name;
					NameTag.Color = color;
					NameTag.Visible = true;
				else
					NameTag.Visible = false
				end

				if ESP.Enabled.i.d then
					DistanceTag.Position = Vector2.new(HeadPos.X, HeadPos.Y + (NameTag.TextBounds.Y));
					DistanceTag.Text = '[' .. math.floor(HeadPos.Z) .. ' Studs]';
					DistanceTag.Color = color;
					DistanceTag.Visible = true;
				else
					DistanceTag.Visible = false
				end

				if ESP.Enabled.i.t then
					Tracer.From		= Vector2.new(workspace.Camera.ViewportSize.X / 2, workspace.Camera.ViewportSize.Y / 2);
					Tracer.To			= Vector2.new(HeadPos.X, HeadPos.Y);
					Tracer.Color		= color;
					Tracer.Visible	= true;
				else
					Tracer.Visible = false
				end
			else
				NameTag.Visible = false
				DistanceTag.Visible = false
				Tracer.Visible = false
			end
		end
	end

	local function UpdateSkeleton()
		if Skeletons[sPlr.Name] ~= nil and #Skeletons[sPlr.Name] == 4 and sPlr.Character:FindFirstChild("Head") and sPlr.Character:FindFirstChild("UpperTorso") and sPlr.Character:FindFirstChild("HumanoidRootPart") then
			local Skeleton = Skeletons[sPlr.Name]
			
			local Head = Skeleton[1]
			local Torso = Skeleton[2]
			local LeftArmLimbs = Skeleton[3][1]
			local RightArmLimbs = Skeleton[3][2]
			local LeftLegLimbs = Skeleton[4][1]
			local RightLegLimbs = Skeleton[4][2]
			
			local NeckFrom,Vis1 = workspace.Camera:WorldToViewportPoint(sPlr.Character.UpperTorso.Position+Vector3.new(0,sPlr.Character.UpperTorso.Size.Y/2-.25,0))
			local NeckTo,Vis2 = workspace.Camera:WorldToViewportPoint(Vector3.new(sPlr.Character.Head.Position.X,sPlr.Character.Head.Position.Y,sPlr.Character.Head.Position.Z))
			
			Head.From = Vector2.new(NeckFrom.X,NeckFrom.Y)
			Head.To = Vector2.new(NeckTo.X,NeckTo.Y)
			
			local ToLower,Vis3 = workspace.Camera:WorldToViewportPoint(sPlr.Character.LowerTorso.Position)
			Torso[1].From = Vector2.new(NeckFrom.X,NeckFrom.Y)
			Torso[1].To = Vector2.new(ToLower.X,ToLower.Y)
			
			local ToUpperArmL,ToUpperArmR,Vis4,Vis5 = workspace.Camera:WorldToViewportPoint(sPlr.Character.LeftUpperArm.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.RightUpperArm.Position)
			
			Torso[2].From = Vector2.new(NeckFrom.X,NeckFrom.Y)
			Torso[2].To = Vector2.new(ToUpperArmL.X,ToUpperArmL.Y)
			
			Torso[3].From = Vector2.new(NeckFrom.X,NeckFrom.Y)
			Torso[3].To = Vector2.new(ToUpperArmR.X,ToUpperArmR.Y)
			
			local ToLowerAL,ToHandL,ToLowerAR,ToHandR,Vis6,Vis7,Vis8,Vis9 = workspace.Camera:WorldToViewportPoint(sPlr.Character.LeftLowerArm.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.LeftHand.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.RightLowerArm.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.RightHand.Position)
			
			LeftArmLimbs[2].From = Vector2.new(ToUpperArmL.X,ToUpperArmL.Y)
			LeftArmLimbs[2].To = Vector2.new(ToLowerAL.X,ToLowerAL.Y)
			
			RightArmLimbs[2].From = Vector2.new(ToUpperArmR.X,ToUpperArmR.Y)
			RightArmLimbs[2].To = Vector2.new(ToLowerAR.X,ToLowerAR.Y)
			
			LeftArmLimbs[3].From = Vector2.new(ToLowerAL.X,ToLowerAL.Y)
			LeftArmLimbs[3].To = Vector2.new(ToHandL.X,ToHandL.Y)
			
			RightArmLimbs[3].From = Vector2.new(ToLowerAR.X,ToLowerAR.Y)
			RightArmLimbs[3].To = Vector2.new(ToHandR.X,ToHandR.Y)
			
			local ToUpperLegL,ToUpperLegR,Vis10,Vis11 = workspace.Camera:WorldToViewportPoint(sPlr.Character.LeftUpperLeg.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.RightUpperLeg.Position) 
			
			LeftLegLimbs[1].From = Vector2.new(ToLower.X,ToLower.Y)
			LeftLegLimbs[1].To = Vector2.new(ToUpperLegL.X,ToUpperLegL.Y)
			
			RightLegLimbs[1].From = Vector2.new(ToLower.X,ToLower.Y)
			RightLegLimbs[1].To = Vector2.new(ToUpperLegR.X,ToUpperLegR.Y)
			
			local ToLowerLL,ToFootL,ToLowerLR,ToFootR,Vis12 = workspace.Camera:WorldToViewportPoint(sPlr.Character.LeftLowerLeg.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.LeftFoot.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.RightLowerLeg.Position),workspace.Camera:WorldToViewportPoint(sPlr.Character.RightFoot.Position)
			
			LeftLegLimbs[2].From = Vector2.new(ToUpperLegL.X,ToUpperLegL.Y)
			LeftLegLimbs[2].To = Vector2.new(ToLowerLL.X,ToLowerLL.Y)
			
			RightLegLimbs[2].From = Vector2.new(ToUpperLegR.X,ToUpperLegR.Y)
			RightLegLimbs[2].To = Vector2.new(ToLowerLR.X,ToLowerLR.Y)
			
			LeftLegLimbs[3].From = Vector2.new(ToLowerLL.X,ToLowerLL.Y)
			LeftLegLimbs[3].To = Vector2.new(ToFootL.X,ToFootL.Y)
			
			RightLegLimbs[3].From = Vector2.new(ToLowerLR.X,ToLowerLR.Y)
			RightLegLimbs[3].To = Vector2.new(ToFootR.X,ToFootR.Y)
			
			Head.Visible = Vis2

			Torso[1].Visible = Vis2
			Torso[2].Visible = Vis2
			Torso[3].Visible = Vis2

			LeftLegLimbs[1].Visible = Vis3
			RightLegLimbs[1].Visible = Vis3

			LeftLegLimbs[2].Visible = Vis12
			LeftLegLimbs[3].Visible = Vis12

			RightLegLimbs[2].Visible = Vis12
			RightLegLimbs[3].Visible = Vis12
				
			LeftArmLimbs[2].Visible = Vis6
			LeftArmLimbs[3].Visible = Vis6

			RightArmLimbs[2].Visible = Vis6
			RightArmLimbs[3].Visible = Vis6

			
			Head.Color = color
			Torso[1].Color = color
			Torso[2].Color = color
			Torso[3].Color = color
			LeftLegLimbs[1].Color = color
			RightLegLimbs[1].Color = color
			LeftLegLimbs[2].Color = color
			RightLegLimbs[2].Color = color
			LeftLegLimbs[3].Color = color
			RightLegLimbs[3].Color = color
			LeftArmLimbs[2].Color = color
			RightArmLimbs[2].Color = color
			LeftArmLimbs[3].Color = color
			RightArmLimbs[3].Color = color
		end
    end
    
    local function update3DBox()
        if DBoxes[sPlr.Name] ~= nil and #DBoxes[sPlr.Name] == 3 then
            local Box = DBoxes[sPlr.Name]
            local Char = sPlr.Character
            local Pos,Size = Char.HumanoidRootPart.CFrame,Vector3.new(4, 5, 1)
            
            local TL,V1 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(Size.X/2,Size.Y/2,-Size.Z))
            local TR,V2 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(-Size.X/2,Size.Y/2,-Size.Z))
            local BL,V3 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(Size.X/2,-Size.Y/2,-Size.Z))
            local BR,V4 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(-Size.X/2,-Size.Y/2,-Size.Z))
            
            local BTL,V5 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(Size.X/2,Size.Y/2,Size.Z))
            local BTR,V6 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(-Size.X/2,Size.Y/2,Size.Z))
            local BBL,V7 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(Size.X/2,-Size.Y/2,Size.Z))
            local BBR,V8 = workspace.Camera:WorldToViewportPoint(Pos.p+Vector3.new(-Size.X/2,-Size.Y/2,Size.Z))
            
            Box[1][1].From = Vector2.new(TL.X,TL.Y)
            Box[1][1].To = Vector2.new(TR.X,TR.Y)
            
            Box[1][2].From = Vector2.new(BL.X,BL.Y)
            Box[1][2].To = Vector2.new(BR.X,BR.Y)
            
            Box[1][3].From = Vector2.new(TL.X,TL.Y)
            Box[1][3].To = Vector2.new(BL.X,BL.Y)
            
            Box[1][4].From = Vector2.new(TR.X,TR.Y)
            Box[1][4].To = Vector2.new(BR.X,BR.Y)
            
            Box[2][1].From = Vector2.new(BTL.X,BTL.Y)
            Box[2][1].To = Vector2.new(BTR.X,BTR.Y)
            
            Box[2][2].From = Vector2.new(BBL.X,BBL.Y)
            Box[2][2].To = Vector2.new(BBR.X,BBR.Y)
            
            Box[2][3].From = Vector2.new(BTL.X,BTL.Y)
            Box[2][3].To = Vector2.new(BBL.X,BBL.Y)
            
            Box[2][4].From = Vector2.new(BTR.X,BTR.Y)
            Box[2][4].To = Vector2.new(BBR.X,BBR.Y)
            
            Box[3][1].From = Vector2.new(BTL.X,BTL.Y)
            Box[3][1].To = Vector2.new(TL.X,TL.Y)
            
            Box[3][2].From = Vector2.new(BBL.X,BBL.Y)
            Box[3][2].To = Vector2.new(BL.X,BL.Y)
            
            Box[3][3].From = Vector2.new(BR.X,BR.Y)
            Box[3][3].To = Vector2.new(BBR.X,BBR.Y)
            
            Box[3][4].From = Vector2.new(BTR.X,BTR.Y)
            Box[3][4].To = Vector2.new(TR.X,TR.Y)
            
            Box[1][1].Visible = V1
            Box[1][2].Visible = V3
            Box[1][3].Visible = V1
            Box[1][4].Visible = V3
            
            Box[2][1].Visible = V5
            Box[2][2].Visible = V7
            Box[2][3].Visible = V5
            Box[2][4].Visible = V8
            
            Box[3][1].Visible = V5
            Box[3][2].Visible = V7
            Box[3][3].Visible = V8  
            Box[3][4].Visible = V6
            
            Box[1][1].Color = color
            Box[1][2].Color = color
            Box[1][3].Color = color
            Box[1][4].Color = color
            
            Box[2][1].Color = color
            Box[2][2].Color = color
            Box[2][3].Color = color
            Box[2][4].Color = color
            
            Box[3][1].Color = color
            Box[3][2].Color = color
            Box[3][3].Color = color
            Box[3][4].Color = color
        end
    end

    if ESP.Enabled.s then UpdateSkeleton() end
	if ESP.Enabled.b then update3DBox() end
	UpdateInfo()
end

function templates:MakeSkeleton(sPlr)
	Skeletons[sPlr.Name] = {}
   
	local Skeleton = Skeletons[sPlr.Name]
	local Head = newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})
	local Torso = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	local LeftArmLimbs = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	local RightArmLimbs = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	local LeftLegLimbs = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	local RightLegLimbs = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
   
	Skeleton[1] = Head
	Skeleton[2] = Torso
	Skeleton[3] = {LeftArmLimbs,RightArmLimbs}
	Skeleton[4] = {LeftLegLimbs,RightLegLimbs}
	
	Skeletons[sPlr.Name] = Skeleton
end

function templates:Make3DBox(sPlr)
	local Front = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	local Back = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	local Sides = {newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	DBoxes[sPlr.Name] = {Front,Back,Sides}
end

function templates:MakeInfo(sPlr)
	local InfoT = {newDraw("Text",{Center=true,Outline=true,Size=18}),newDraw("Text",{Center=true,Outline=true,Size=18}),newDraw("Line",{Color=Color3.new(1,1,1),Thickness=Thicc})}
	Info[sPlr.Name] = InfoT
end

function DrawPlayers()
	for _,p in pairs(game.Players:GetPlayers()) do
		if Skeletons[p.Name] == nil and DBoxes[p.Name] == nil and Info[p.Name] == nil then 
            templates:Make3DBox(p)
			templates:MakeSkeleton(p)
			templates:MakeInfo(p)
		end
	end
end

function Hide(sPlr)
	local Skeleton = Skeletons[sPlr.Name]
	local Box = DBoxes[sPlr.Name]
	local InfoC = Info[sPlr.Name]	

	pcall(function()
		for i,v in pairs(Skeleton) do
			if v["Visible"] == nil then
				for j,k in pairs(v) do
					pcall(function() k["Visible"] = false end)
				end
			else
				pcall(function() v["Visible"] = false end)
			end
		end
	end)
	
	pcall(function()
		for i,v in pairs(Box) do
			if v["Visible"] == nil then
				for j,k in pairs(v) do
					pcall(function() k["Visible"] = false end)
				end
			else
				pcall(function() v["Visible"] = false end)
			end
		end
	end)

	pcall(function()
		for i,v in pairs(InfoC) do
			if v["Visible"] == nil then
				for j,k in pairs(v) do
					pcall(function() k["Visible"] = false end)
				end
			else
				pcall(function() v["Visible"] = false end)
			end
		end
	end)
end

function Clear(sPlr)
	local Skeleton = Skeletons[sPlr.Name]
	local Box = DBoxes[sPlr.Name]	
	local InfoC = Info[sPlr.Name]
	
	pcall(function()
		for i,v in pairs(Skeleton) do
			if v["Visible"] == nil then
				for j,k in pairs(v) do
					pcall(function() k:Remove() end)
				end
			else
				pcall(function() v:Remove() end)
			end
		end
	end)
	
	pcall(function()
		for i,v in pairs(Box) do
			if v["Visible"] == nil then
				for j,k in pairs(v) do
					pcall(function() k:Remove() end)
				end
			else
				pcall(function() v:Remove() end)
			end
		end
	end)

	pcall(function()
		for i,v in pairs(InfoC) do
			if v["Visible"] == nil then
				for j,k in pairs(v) do
					pcall(function() k:Remove() end)
				end
			else
				pcall(function() v:Remove() end)
			end
		end
	end)
	
	Skeletons[sPlr.Name] = nil 
	DBoxes[sPlr.Name] = nil
	Info[sPlr.Name] = nil
end

DrawPlayers()

game:GetService("RunService").RenderStepped:Connect(function()
	if ESP.Rainbow then
		local hue = tick() % 5 / 5
		color = Color3.fromHSV(hue, 1, 1)
	else
		color = Color3.new(1,1,1)
	end
	
    for i,v in pairs(game.Players:GetPlayers()) do
        if ESP.updating == true and v ~= Plr and (ESP.cTeam and v.Team ~= Plr.Team or true) and v.Character then
            local updt,res = pcall(Update,v)
            if not updt then
                warn(res)
                ESP.Skeletons = {}
				ESP.DBoxes = {}
				ESP.Info = {}
                Skeletons = ESP.Skeletons
				DBoxes = ESP.DBoxes
				Info = ESP.Info
            end
        end
    end
end)

game:GetService("Players").PlayerRemoving:Connect(function(sPlr)
	ESP.updating = false
    Hide(sPlr)
	Clear(sPlr)
	ESP.updating = true
end)

game:GetService("Players").PlayerAdded:Connect(function(sPlr)
    if ESP.updating then
        templates:Make3DBox(sPlr)
		templates:MakeSkeleton(sPlr)
		templates:MakeInfo(sPlr)
    end
end)


Plr.Changed:Connect(function(prop)
	if prop == "Team" then
		ESP.updating = false
		wait(1)
		
		local c,a  = pcall(ClearAll)
		if not c then warn("Failed to clear all, retrying...",a) end
		
		local c,a  = pcall(ClearAll)
        if not c then warn("Retry failed! Please report to Axen on discord with the error message!",a) end

        local c,a  = pcall(ClearAll)
        
		ESP.Skeletons = {}
		ESP.DBoxes = {}
		ESP.Info = {}

		Skeletons = ESP.Skeletons
		DBoxes = ESP.DBoxes
		Info = ESP.Info

		DrawPlayers()
		ESP.updating = true
	end
end)

game:GetService("UserInputService").InputBegan:Connect(function(Input,GP) 
    if GP then return end 
    if Input.KeyCode == Enum.KeyCode.F8 then
        warn("Cleared")
        ESP.updating = false 
        pcall(ClearAll)
        DrawPlayers() 
        ESP.updating = true
    end 
end)

local Lib = {}

function Lib:SetESP(Value)
	ESP.updating = false
	pcall(ClearAll)
	DrawPlayers()
	ESP.updating = Value
end

function  Lib:SetBox(Value)
	ESP.Enabled.b = Value
	local Old = ESP.updating
	ESP.updating = false
	pcall(ClearAll)
	DrawPlayers()
	ESP.updating = Old
end

function  Lib:SetSkeleton(Value)
	ESP.Enabled.s = Value
	local Old = ESP.updating
	ESP.updating = false
	pcall(ClearAll)
	DrawPlayers()
	ESP.updating = Old
end

function  Lib:SetInfo(Info,Value)
	ESP.Enabled.i[Info] = Value
	local Old = ESP.updating
	ESP.updating = false
	pcall(ClearAll)
	DrawPlayers()
	ESP.updating = Old
end

function Lib:SetColor(newColor)
	color = newColor
end

function Lib:SetExtra(Extra,Value)
	ESP[Extra] = Value
	local Old = ESP.updating
	ESP.updating = false
	pcall(ClearAll)
	DrawPlayers()
	ESP.updating = Old
end

function Lib:SetENU(Extra,Value)
	ESP[Extra] = Value
end

getgenv().ESPLib = Lib
